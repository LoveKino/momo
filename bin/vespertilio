#!/usr/bin/env node

const yargs = require('yargs');
const del = require('del');
const path = require('path');
const {deployDpm} = require('../src');
const {
  readConfig, spawnp, existsDir, mkdirp, exec, readJson, writeTxt
} = require('flexdeploy/src/util');

yargs.usage(`Usage: vespertilio
    --upd
    --config    config file path

    --only      only build one worker
    `).help('h').alias('h', 'help');

const {argv} = yargs;

const prepareBaseProjects = async(cnfDir, cnf, repoRoot, dpmSrc) => {
  if(!await existsDir(dpmSrc) || argv.upd) {
    await del([dpmSrc]);
    await spawnp('git', ['clone', 'git@github.com:lock-free/dpm-cluster-demo.git', cnf.dpm.src], {
      cwd: cnfDir
    });

    await del([path.join(dpmSrc, '.git')]);
  }

  // copy cnf
  await copyDir(path.join(cnfDir, cnf.dpm.cnfDir), path.join(dpmSrc, './stage/data/cnf'));

  // modify config json on the fly
  await writeTxt(path.join(dpmSrc, './stage/data/config.json'),
    JSON.stringify(
      Object.assign(
        await readJson(path.join(cnfDir, cnf.dpm.cnfFile)),
        {
          Only: cnf.only || ''
        }
      ),
      null,
      4
    )
  );

  await Promise.all([
    updateRepo('git@github.com:lock-free/dpm_service.git', repoRoot, 'dpm_service'),
    updateRepo('git@github.com:lock-free/na_service.git', repoRoot, 'na_service'),
    updateRepo('git@github.com:lock-free/httpna_service.git', repoRoot, 'httpna_service')
  ]);
};

// TODO filter worker
const buildWorkers = async (cnfDir, cnf, srcRepo, repoRoot, dpmSrc) => {
  await Promise.all([
    await copyStageToDpmSrcRepo(repoRoot, srcRepo, 'na_service'),
    await copyStageToDpmSrcRepo(repoRoot, srcRepo, 'httpna_service')
  ].concat(
    // copy workers
    (
      cnf.only? cnf.source.workers.filter(({serviceType}) => serviceType === cnf.only): cnf.source.workers
    ).map(async ({serviceType, buildCmd}) => {
      // build first
      if(buildCmd) {
        await exec(buildCmd, {
          cwd: cnfDir
        });
      }

      // copy source from repo root to dpm src repo
      await copyStageToDpmSrcRepo(repoRoot, srcRepo, serviceType);
      // copy data dir
      if(cnf.dpm.data) {
        const workerDataSrcDir = path.join(cnfDir, cnf.dpm.data, serviceType);
        const workerDataTarDir = path.join(srcRepo, serviceType, './stage/data');
        if(await existsDir(workerDataSrcDir)) {
          await copyDir(workerDataSrcDir, workerDataTarDir);
        }
      }
    }))
  );

  // copy config for httpna
  await copyDir(path.join(cnfDir, cnf.httpna.cnfDir), path.join(dpmSrc, './stage/data/src/httpna_service/stage/data'));
};

const deployDpmHelp = async (cnfDir, cnf, repoRoot, dpmSrc) => {
  // copy binary
  const dpmBinPath = path.resolve(dpmSrc, './stage/bin/');
  await mkdirp(dpmBinPath);
  await spawnp('cp', [path.resolve(repoRoot, 'dpm_service/stage/bin/dpm_service'), dpmBinPath]);

  // deploy dpm
  const dpmDeployCnfPath = path.resolve(cnfDir, cnf.dpm['deploy-cnf']);
  await deployDpm(dpmDeployCnfPath, 'staging');
};

const run = async () => {
  const cnfFilePath = path.resolve(process.cwd(), argv.config || 'vespertilio.json');
  const cnf = Object.assign(await readConfig(cnfFilePath), {
    only: argv.only
  });
  const cnfDir = path.dirname(cnfFilePath);
  const repoRoot = path.resolve(cnfDir, cnf.source.repoRoot);
  const dpmSrc = path.resolve(cnfDir, cnf.dpm.src);
  const srcRepo = path.resolve(dpmSrc, './stage/data/src');

  await prepareBaseProjects(cnfDir, cnf, repoRoot, dpmSrc);

  await buildWorkers(cnfDir, cnf, srcRepo, repoRoot, dpmSrc);

  await deployDpmHelp(cnfDir, cnf, repoRoot, dpmSrc);
};

const updateRepo = async(gitAddr, repoRoot, targetDir) => {
  const repoDir = path.resolve(repoRoot, targetDir);
  if(! await existsDir(repoDir)) {
    await spawnp('git', ['clone', gitAddr, repoDir]);
  } else {
    await spawnp('git', ['pull'], {
      cwd: repoDir
    });
  }
};

// copy stage dir and empty Makefile
const copyStageToDpmSrcRepo = async (repoRoot, srcRepo, targetDir) => {
  const srcStage = path.resolve(srcRepo, targetDir, 'stage');
  const repoStage = path.resolve(repoRoot, targetDir, 'stage');

  await copyDir(repoStage, srcStage);
  await spawnp('cp', [path.join(__dirname, '../res/makefile'), path.resolve(srcRepo, targetDir, 'makefile')]);
};

const copyDir = async (srcDir, tarDir) => {
  await mkdirp(tarDir);
  await del([tarDir]);
  await spawnp('cp', ['-r', srcDir, tarDir]);
};

run();
